[
    {
        "text_input": "which partnerships have the highest strike rate in death overs minimum 200 runs",
        "output": "SELECT LEAST(p1.id, p2.id) as batter1_id, CASE WHEN p1.id < p2.id THEN p1.name ELSE p2.name END as batter1_name, GREATEST(p1.id, p2.id) as batter2_id, CASE WHEN p1.id < p2.id THEN p2.name ELSE p1.name END as batter2_name, t.id as team_id, t.full_name as team_name, COUNT(DISTINCT m.id) as matches_together, SUM(CASE WHEN p1.id < p2.id THEN d1.runs_batter + CASE WHEN d1.is_wide = true THEN 1 WHEN d1.is_no_ball = true THEN 1 ELSE 0 END ELSE 0 END) as partnership_runs, COUNT(CASE WHEN d1.is_legal_ball = true AND p1.id < p2.id THEN 1 END) as balls_faced, ROUND(SUM(CASE WHEN p1.id < p2.id THEN d1.runs_batter + CASE WHEN d1.is_wide = true THEN 1 WHEN d1.is_no_ball = true THEN 1 ELSE 0 END ELSE 0 END) * 100.0 / NULLIF(COUNT(CASE WHEN d1.is_legal_ball = true AND p1.id < p2.id THEN 1 END), 0), 2) as strike_rate FROM ipl.deliveries d1 JOIN ipl.overs o ON d1.over_id = o.id JOIN ipl.innings i ON o.innings_id = i.id JOIN ipl.matches m ON i.match_id = m.id JOIN ipl.players p1 ON d1.batter_id = p1.id JOIN ipl.players p2 ON d1.non_striker_id = p2.id JOIN ipl.teams t ON i.batting_team_id = t.id WHERE d1.phase = 'death_overs' GROUP BY LEAST(p1.id, p2.id), GREATEST(p1.id, p2.id), CASE WHEN p1.id < p2.id THEN p1.name ELSE p2.name END, CASE WHEN p1.id < p2.id THEN p2.name ELSE p1.name END, t.id, t.full_name HAVING SUM(CASE WHEN p1.id < p2.id THEN d1.runs_batter + CASE WHEN d1.is_wide = true THEN 1 WHEN d1.is_no_ball = true THEN 1 ELSE 0 END ELSE 0 END) >= 200 ORDER BY strike_rate DESC LIMIT 10"
    },
    {
        "text_input": "which bowler has the best record against left handed batters in powerplay",
        "output": "SELECT o.bowler_id, p.name as bowler_name, t.id as team_id, t.full_name as team_name, COUNT(CASE WHEN d.is_wicket = true THEN 1 END) as wickets, SUM(d.runs_batter + CASE WHEN d.is_wide = true OR d.is_no_ball = true THEN 1 ELSE 0 END) as runs_conceded, COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) as balls_bowled, ROUND(SUM(d.runs_batter + CASE WHEN d.is_wide = true OR d.is_no_ball = true THEN 1 ELSE 0 END) * 6.0 / NULLIF(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END), 0), 2) as economy, ROUND(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) * 1.0 / NULLIF(COUNT(CASE WHEN d.is_wicket = true THEN 1 END), 0), 2) as strike_rate FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.innings i ON o.innings_id = i.id JOIN ipl.players p ON o.bowler_id = p.id JOIN ipl.teams t ON i.bowling_team_id = t.id JOIN ipl.players pb ON d.batter_id = pb.id WHERE d.phase = 'powerplay' AND pb.batting_style LIKE 'Left%' GROUP BY o.bowler_id, p.name, t.id, t.full_name HAVING COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) >= 30 ORDER BY strike_rate ASC LIMIT 10"
    },
    {
        "text_input": "which player has improved their strike rate the most compared to their previous season minimum 200 runs both seasons",
        "output": "WITH season_stats AS (SELECT ba.player_id, p.name as player_name, ba.season_id, s.year, ba.total_runs, ba.strike_rate, LAG(ba.strike_rate) OVER (PARTITION BY ba.player_id ORDER BY s.year) as prev_season_sr, LAG(ba.total_runs) OVER (PARTITION BY ba.player_id ORDER BY s.year) as prev_season_runs FROM ipl.batting_aggregate ba JOIN ipl.players p ON ba.player_id = p.id JOIN ipl.seasons s ON ba.season_id = s.id WHERE ba.total_runs >= 200) SELECT player_id, player_name, year as current_season, year - 1 as previous_season, total_runs, prev_season_runs, strike_rate as current_sr, prev_season_sr, ROUND(strike_rate - prev_season_sr, 2) as sr_improvement FROM season_stats WHERE prev_season_runs >= 200 AND prev_season_sr IS NOT NULL ORDER BY sr_improvement DESC LIMIT 10"
    },
    {
        "text_input": "which venue has the biggest difference in first innings vs second innings average scores",
        "output": "WITH innings_averages AS (SELECT v.id as venue_id, v.name as venue_name, v.city, i.innings_number, AVG(i.total_score) as avg_score, COUNT(*) as matches_played FROM ipl.venues v JOIN ipl.matches m ON v.id = m.venue_id JOIN ipl.innings i ON m.id = i.match_id WHERE i.innings_number IN (1, 2) GROUP BY v.id, v.name, v.city, i.innings_number HAVING COUNT(*) >= 10) SELECT a1.venue_id, a1.venue_name, a1.city, ROUND(a1.avg_score, 2) as first_innings_avg, ROUND(a2.avg_score, 2) as second_innings_avg, ROUND(ABS(a1.avg_score - a2.avg_score), 2) as innings_difference FROM innings_averages a1 JOIN innings_averages a2 ON a1.venue_id = a2.venue_id WHERE a1.innings_number = 1 AND a2.innings_number = 2 ORDER BY innings_difference DESC"
    },
    {
        "text_input": "which players perform best in knockout matches compared to league matches",
        "output": "SELECT p.id as player_id, p.name as player_name, COUNT(CASE WHEN m.stage IN ('Final', 'Qualifier 1', 'Qualifier 2', 'Eliminator') THEN 1 END) as knockout_innings, COUNT(CASE WHEN m.stage = 'group stage' THEN 1 END) as league_innings, ROUND(AVG(CASE WHEN m.stage IN ('Final', 'Qualifier 1', 'Qualifier 2', 'Eliminator') THEN dbs.runs_scored END), 2) as knockout_avg, ROUND(AVG(CASE WHEN m.stage = 'group stage' THEN dbs.runs_scored END), 2) as league_avg, ROUND(AVG(CASE WHEN m.stage IN ('Final', 'Qualifier 1', 'Qualifier 2', 'Eliminator') THEN dbs.strike_rate END), 2) as knockout_sr, ROUND(AVG(CASE WHEN m.stage = 'group stage' THEN dbs.strike_rate END), 2) as league_sr, ROUND(AVG(CASE WHEN m.stage IN ('Final', 'Qualifier 1', 'Qualifier 2', 'Eliminator') THEN dbs.runs_scored END) - AVG(CASE WHEN m.stage = 'group stage' THEN dbs.runs_scored END), 2) as avg_difference, ROUND(AVG(CASE WHEN m.stage IN ('Final', 'Qualifier 1', 'Qualifier 2', 'Eliminator') THEN dbs.strike_rate END) - AVG(CASE WHEN m.stage = 'group stage' THEN dbs.strike_rate END), 2) as sr_difference FROM ipl.detailed_batting_scorecard dbs JOIN ipl.matches m ON dbs.match_id = m.id JOIN ipl.players p ON dbs.batter_id = p.id GROUP BY p.id, p.name HAVING COUNT(CASE WHEN m.stage IN ('Final', 'Qualifier 1', 'Qualifier 2', 'Eliminator') THEN 1 END) >= 5 AND COUNT(CASE WHEN m.stage = 'group stage' THEN 1 END) >= 5 ORDER BY avg_difference DESC LIMIT 10"
    },
    {
        "text_input": "virat kohli's performance in successful run chases where he remained not out",
        "output": "SELECT p.id as player_id, p.name, m.id as match_id, t.id as team_id, t.short_name as team, s.year, dbs.runs_scored, dbs.balls_faced, dbs.strike_rate, dbs.fours, dbs.sixes, i.total_score as target_chased FROM ipl.detailed_batting_scorecard dbs JOIN ipl.matches m ON dbs.match_id = m.id JOIN ipl.players p ON dbs.batter_id = p.id JOIN ipl.teams t ON dbs.team_id = t.id JOIN ipl.seasons s ON m.season_id = s.id JOIN ipl.innings i ON m.id = i.match_id AND i.innings_number = 1 WHERE p.name LIKE '%Kohli%' AND dbs.dismissal_type IS NULL AND m.winner_id = dbs.team_id AND dbs.innings_number = 2 ORDER BY dbs.runs_scored DESC"
    },
    {
        "text_input": "ms dhoni's death over strike rate against different bowling types",
        "output": "SELECT p2.bowling_style, COUNT(DISTINCT o.bowler_id) as bowlers_faced, COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) as balls_faced, SUM(d.runs_batter) as runs_scored, COUNT(CASE WHEN d.is_wicket = true THEN 1 END) as dismissals, ROUND(SUM(d.runs_batter) * 100.0 / NULLIF(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END), 0), 2) as strike_rate, ROUND(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) * 1.0 / NULLIF(COUNT(CASE WHEN d.is_wicket = true THEN 1 END), 0), 2) as balls_per_dismissal FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.players p1 ON d.batter_id = p1.id JOIN ipl.players p2 ON o.bowler_id = p2.id WHERE p1.name LIKE '%Dhoni%' AND d.phase = 'death_overs' GROUP BY p2.bowling_style HAVING COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) >= 20 ORDER BY strike_rate DESC"
    },
    {
        "text_input": "rohit sharma's performance in season openers",
        "output": "WITH first_matches AS (SELECT DISTINCT ON (s.id) m.id as match_id, s.id as season_id, s.year FROM ipl.matches m JOIN ipl.seasons s ON m.season_id = s.id ORDER BY s.id, m.date) SELECT p.id as player_id, p.name, s.id as season_id, s.year, t.id as team_id, t.short_name as team, dbs.runs_scored, dbs.balls_faced, dbs.strike_rate, dbs.fours, dbs.sixes, dbs.dismissal_type, dbs.bowler_name FROM ipl.detailed_batting_scorecard dbs JOIN ipl.players p ON dbs.batter_id = p.id JOIN ipl.matches m ON dbs.match_id = m.id JOIN ipl.teams t ON dbs.team_id = t.id JOIN ipl.seasons s ON m.season_id = s.id JOIN first_matches fm ON m.id = fm.match_id WHERE p.name LIKE '%Rohit%' ORDER BY s.year"
    },
    {
        "text_input": "ab de villiers performance against leg spinners in middle overs",
        "output": "SELECT s.year, COUNT(DISTINCT m.id) as matches, COUNT(DISTINCT o.bowler_id) as bowlers_faced, COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) as total_balls, SUM(d.runs_batter) as total_runs, ROUND(SUM(d.runs_batter) * 100.0 / NULLIF(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END), 0), 2) as strike_rate, COUNT(CASE WHEN d.is_wicket = true THEN 1 END) as times_dismissed FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.innings i ON o.innings_id = i.id JOIN ipl.matches m ON i.match_id = m.id JOIN ipl.seasons s ON m.season_id = s.id JOIN ipl.players p1 ON d.batter_id = p1.id JOIN ipl.players p2 ON o.bowler_id = p2.id WHERE p1.name = 'AB de Villiers' AND d.phase = 'middle_overs' AND (p2.bowling_style LIKE '%Legbreak%' OR p2.bowling_style LIKE '%Wrist spin%') GROUP BY s.year ORDER BY s.year DESC"
    },
    {
        "text_input": "jasprit bumrah's yorker success rate in death overs",
        "output": "WITH yorker_deliveries AS (SELECT m.id as match_id, s.year, d.batter_id, p2.name as batter_name, COUNT(*) as yorkers_bowled, COUNT(CASE WHEN d.is_wicket = true THEN 1 END) as wickets, SUM(d.runs_batter) as runs_conceded FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.innings i ON o.innings_id = i.id JOIN ipl.matches m ON i.match_id = m.id JOIN ipl.seasons s ON m.season_id = s.id JOIN ipl.players p1 ON o.bowler_id = p1.id JOIN ipl.players p2 ON d.batter_id = p2.id WHERE p1.name LIKE '%Bumrah%' AND d.phase = 'death' AND d.length = 'yorker' GROUP BY m.id, s.year, d.batter_id, p2.name) SELECT year, COUNT(DISTINCT match_id) as matches, SUM(yorkers_bowled) as total_yorkers, SUM(wickets) as wickets_with_yorkers, SUM(runs_conceded) as runs_off_yorkers, ROUND(SUM(wickets) * 100.0 / NULLIF(SUM(yorkers_bowled), 0), 2) as wicket_percentage, ROUND(SUM(runs_conceded) * 6.0 / NULLIF(SUM(yorkers_bowled), 0), 2) as economy_rate FROM yorker_deliveries GROUP BY year ORDER BY year DESC"
    },
    {
        "text_input": "suresh raina's powerplay vs death overs strike rate comparison against pace",
        "output": "SELECT d.phase, COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) as balls_faced, SUM(d.runs_batter) as runs_scored, COUNT(CASE WHEN d.is_wicket = true THEN 1 END) as dismissals, ROUND(SUM(d.runs_batter) * 100.0 / NULLIF(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END), 0), 2) as strike_rate, ROUND(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) * 1.0 / NULLIF(COUNT(CASE WHEN d.is_wicket = true THEN 1 END), 0), 2) as balls_per_dismissal FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.players p1 ON d.batter_id = p1.id JOIN ipl.players p2 ON o.bowler_id = p2.id WHERE p1.name LIKE '%Raina%' AND p2.bowling_style LIKE '%fast%' AND d.phase IN ('powerplay', 'death_overs') GROUP BY d.phase ORDER BY d.phase"
    },
    {
        "text_input": "chris gayle's first 10 balls vs rest of innings analysis",
        "output": "WITH ball_by_ball AS (SELECT m.id as match_id, s.year, ROW_NUMBER() OVER (PARTITION BY m.id ORDER BY o.over_number, d.ball_number) as ball_number, d.runs_batter FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.innings i ON o.innings_id = i.id JOIN ipl.matches m ON i.match_id = m.id JOIN ipl.seasons s ON m.season_id = s.id JOIN ipl.players p ON d.batter_id = p.id WHERE p.name LIKE '%Gayle%' AND d.is_legal_ball = true) SELECT year, COUNT(DISTINCT match_id) as innings, SUM(CASE WHEN ball_number <= 10 THEN runs_batter END) as runs_first_10, COUNT(CASE WHEN ball_number <= 10 THEN 1 END) as balls_first_10, ROUND(SUM(CASE WHEN ball_number <= 10 THEN runs_batter END) * 100.0 / NULLIF(COUNT(CASE WHEN ball_number <= 10 THEN 1 END), 0), 2) as sr_first_10, SUM(CASE WHEN ball_number > 10 THEN runs_batter END) as runs_after_10, COUNT(CASE WHEN ball_number > 10 THEN 1 END) as balls_after_10, ROUND(SUM(CASE WHEN ball_number > 10 THEN runs_batter END) * 100.0 / NULLIF(COUNT(CASE WHEN ball_number > 10 THEN 1 END), 0), 2) as sr_after_10 FROM ball_by_ball GROUP BY year ORDER BY year DESC"
    },
    {
        "text_input": "which players have best average in successful 180+ chases",
        "output": "SELECT p.id as player_id, p.name as player_name, t.id as team_id, t.short_name as team, COUNT(DISTINCT dbs.match_id) as innings_played, SUM(dbs.runs_scored) as total_runs, COUNT(CASE WHEN dbs.dismissal_type IS NOT NULL THEN 1 END) as times_dismissed, ROUND(SUM(dbs.runs_scored)::decimal / NULLIF(COUNT(CASE WHEN dbs.dismissal_type IS NOT NULL THEN 1 END), 0), 2) as average, ROUND(SUM(dbs.runs_scored) * 100.0 / NULLIF(SUM(dbs.balls_faced), 0), 2) as strike_rate FROM ipl.detailed_batting_scorecard dbs JOIN ipl.matches m ON dbs.match_id = m.id JOIN ipl.innings i1 ON m.id = i1.match_id AND i1.innings_number = 1 JOIN ipl.players p ON dbs.batter_id = p.id JOIN ipl.teams t ON dbs.team_id = t.id WHERE i1.total_score >= 180 AND dbs.innings_number = 2 AND dbs.team_id = m.winner_id GROUP BY p.id, p.name, t.id, t.short_name HAVING COUNT(DISTINCT dbs.match_id) >= 5 ORDER BY average DESC LIMIT 10"
    },
    {
        "text_input": "hardik pandya's performance as captain vs non captain",
        "output": "SELECT p.id as player_id, CASE WHEN pmr.is_captain THEN 'Captain' ELSE 'Non-Captain' END as role, COUNT(DISTINCT m.id) as matches, ROUND(AVG(dbs.runs_scored), 2) as avg_runs, ROUND(AVG(dbs.strike_rate), 2) as avg_sr, COUNT(CASE WHEN dbs.runs_scored >= 50 THEN 1 END) as fifties, SUM(dbs.wickets) as wickets, ROUND(AVG(dbs.economy_rate), 2) as economy FROM ipl.detailed_batting_scorecard dbs JOIN ipl.matches m ON dbs.match_id = m.id JOIN ipl.players p ON dbs.batter_id = p.id JOIN ipl.player_match_roles pmr ON m.id = pmr.match_id AND p.id = pmr.player_id WHERE p.name LIKE '%Hardik%Pandya%' GROUP BY p.id, CASE WHEN pmr.is_captain THEN 'Captain' ELSE 'Non-Captain' END"
    },
    {
        "text_input": "best bowling spells in last 5 overs of successful defenses under 150",
        "output": "WITH low_defenses AS (SELECT m.id as match_id FROM ipl.matches m JOIN ipl.innings i1 ON m.id = i1.match_id AND i1.innings_number = 1 JOIN ipl.innings i2 ON m.id = i2.match_id AND i2.innings_number = 2 WHERE i1.total_score < 150 AND i1.total_score > i2.total_score) SELECT p.id as player_id, p.name as bowler_name, t.id as team_id, t.short_name as team, m.id as match_id, s.id as season_id, s.year, COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) as balls_bowled, SUM(d.runs_batter + CASE WHEN d.is_wide = true OR d.is_no_ball = true THEN 1 ELSE 0 END) as runs_conceded, COUNT(CASE WHEN d.is_wicket = true THEN 1 END) as wickets FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.innings i ON o.innings_id = i.id JOIN ipl.matches m ON i.match_id = m.id JOIN ipl.players p ON o.bowler_id = p.id JOIN ipl.teams t ON i.bowling_team_id = t.id JOIN ipl.seasons s ON m.season_id = s.id JOIN low_defenses ld ON m.id = ld.match_id WHERE o.over_number >= 16 AND i.innings_number = 2 GROUP BY p.id, p.name, t.id, t.short_name, m.id, s.id, s.year ORDER BY wickets DESC, runs_conceded ASC LIMIT 10"
    },
    {
        "text_input": "which players have highest percentage of runs in boundaries",
        "output": "WITH boundary_stats AS (SELECT p.id as player_id, p.name as player_name, t.id as team_id, t.short_name as team, SUM(dbs.runs_scored) as total_runs, SUM(dbs.fours * 4 + dbs.sixes * 6) as runs_in_boundaries, COUNT(DISTINCT m.id) as matches_played FROM ipl.detailed_batting_scorecard dbs JOIN ipl.matches m ON dbs.match_id = m.id JOIN ipl.players p ON dbs.batter_id = p.id JOIN ipl.teams t ON dbs.team_id = t.id GROUP BY p.id, p.name, t.id, t.short_name HAVING SUM(dbs.runs_scored) >= 500) SELECT *, ROUND(runs_in_boundaries * 100.0 / total_runs, 2) as boundary_percentage FROM boundary_stats ORDER BY boundary_percentage DESC LIMIT 10"
    },
    {
        "text_input": "rashid khan's record against right vs left handed batsmen",
        "output": "SELECT p2.batting_style, COUNT(DISTINCT d.batter_id) as batsmen_faced, COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) as balls_bowled, SUM(d.runs_batter + CASE WHEN d.is_wide = true OR d.is_no_ball = true THEN 1 ELSE 0 END) as runs_conceded, COUNT(CASE WHEN d.is_wicket = true THEN 1 END) as wickets, ROUND(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END)::decimal / NULLIF(COUNT(CASE WHEN d.is_wicket = true THEN 1 END), 0), 2) as balls_per_wicket, ROUND(SUM(d.runs_batter + CASE WHEN d.is_wide = true OR d.is_no_ball = true THEN 1 ELSE 0 END) * 6.0 / NULLIF(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END), 0), 2) as economy FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.players p1 ON o.bowler_id = p1.id JOIN ipl.players p2 ON d.batter_id = p2.id WHERE p1.name LIKE '%Rashid%Khan%' GROUP BY p2.batting_style ORDER BY balls_bowled DESC"
    },
    {
        "text_input": "best death over partnerships minimum 300 runs",
        "output": "SELECT LEAST(p1.id, p2.id) as batter1_id, CASE WHEN p1.id < p2.id THEN p1.name ELSE p2.name END as batter1_name, GREATEST(p1.id, p2.id) as batter2_id, CASE WHEN p1.id < p2.id THEN p2.name ELSE p1.name END as batter2_name, t.id as team_id, t.short_name as team, COUNT(DISTINCT m.id) as matches_together, SUM(d.runs_total) as partnership_runs, COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END) as balls_faced, ROUND(SUM(d.runs_total) * 100.0 / NULLIF(COUNT(CASE WHEN d.is_legal_ball = true THEN 1 END), 0), 2) as strike_rate FROM ipl.deliveries d JOIN ipl.overs o ON d.over_id = o.id JOIN ipl.innings i ON o.innings_id = i.id JOIN ipl.matches m ON i.match_id = m.id JOIN ipl.players p1 ON d.batter_id = p1.id JOIN ipl.players p2 ON d.non_striker_id = p2.id JOIN ipl.teams t ON i.batting_team_id = t.id WHERE d.phase = 'death_overs' GROUP BY LEAST(p1.id, p2.id), GREATEST(p1.id, p2.id), CASE WHEN p1.id < p2.id THEN p1.name ELSE p2.name END, CASE WHEN p1.id < p2.id THEN p2.name ELSE p1.name END, t.id, t.short_name HAVING SUM(d.runs_total) >= 300 ORDER BY strike_rate DESC LIMIT 10"
    },
    {
        "text_input": "impact of dew on chase success rate by venue",
        "output": "WITH chase_outcomes AS (SELECT v.id as venue_id, v.name as venue_name, v.city, m.id as match_id, EXTRACT(HOUR FROM m.start_time) as start_hour, CASE WHEN m.winner_id = i2.batting_team_id THEN 1 ELSE 0 END as successful_chase FROM ipl.matches m JOIN ipl.venues v ON m.venue_id = v.id JOIN ipl.innings i1 ON m.id = i1.match_id AND i1.innings_number = 1 JOIN ipl.innings i2 ON m.id = i2.match_id AND i2.innings_number = 2 WHERE m.start_time IS NOT NULL) SELECT venue_id, venue_name, city, COUNT(*) as total_chases, SUM(CASE WHEN start_hour >= 18 THEN successful_chase END) as night_successful_chases, COUNT(CASE WHEN start_hour >= 18 THEN 1 END) as night_matches, SUM(CASE WHEN start_hour < 18 THEN successful_chase END) as day_successful_chases, COUNT(CASE WHEN start_hour < 18 THEN 1 END) as day_matches, ROUND(SUM(CASE WHEN start_hour >= 18 THEN successful_chase END) * 100.0 / NULLIF(SUM(CASE WHEN start_hour < 18 THEN successful_chase END), 0), 2) as night_percentage, ROUND(SUM(CASE WHEN start_hour < 18 THEN successful_chase END) * 100.0 / NULLIF(SUM(CASE WHEN start_hour >= 18 THEN successful_chase END), 0), 2) as day_percentage FROM chase_outcomes GROUP BY venue_id, venue_name, city ORDER BY total_chases DESC"
    },
    {
        "text_input": "which players have best record in tournament finals",
        "output": "SELECT p.name as player_name, COUNT(DISTINCT pmp.match_id) as finals_played, COUNT(CASE WHEN m.winner_id = pmp.team_id THEN 1 END) as finals_won, COUNT(CASE WHEN m.winner_id != pmp.team_id THEN 1 END) as finals_lost FROM ipl.matches m JOIN ipl.player_match_performance pmp ON m.id = pmp.match_id JOIN ipl.players p ON pmp.player_id = p.id WHERE m.stage = 'Final' GROUP BY p.name HAVING COUNT(DISTINCT pmp.match_id) >= 2 ORDER BY finals_won DESC, finals_played DESC LIMIT 10;"
    }
]